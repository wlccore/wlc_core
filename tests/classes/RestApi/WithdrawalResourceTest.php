<?php

namespace eGamings\WLC\Tests\RestApi;

use eGamings\WLC\RestApi\ApiException;
use eGamings\WLC\RestApi\WithdrawalResource;
use eGamings\WLC\Tests\BaseCase;
use eGamings\WLC\User;

final class WithdrawalResourceTest extends BaseCase
{
    /**
     * @var \PHPUnit\Framework\MockObject\MockObject
     */
    private $userMock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userMock = $this->createMock(User::class);

        $reflectionProperty = new \ReflectionProperty(User::class, '_instance');
        $reflectionProperty->setAccessible(true);
        $reflectionProperty->setValue($this->userMock);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $reflectionProperty = new \ReflectionProperty(User::class, '_instance');
        $reflectionProperty->setAccessible(true);
        $reflectionProperty->setValue(null);
    }

    public function testWithdrawCompleteUnsupportedAction(): void
    {
        $userProfileResource = new WithdrawalResource();
        $this->expectException(ApiException::class);

        $userProfileResource->patch([], [], ['type' => 'unsupported_action']);
    }

    public function testWithdrawCompleteInvalidRequest(): void
    {
        $this->userMock->expects($this->any())->method('completeDebet')->willReturn('wrong_response');

        $userProfileResource = new WithdrawalResource();

        $this->expectException(ApiException::class);

        $userProfileResource->patch([], ['id' => 10], ['type' => 'complete']);
    }

    public function testWithdrawCompleteError(): void
    {
        $this->userMock->expects($this->any())->method('completeDebet')->willReturn('0,SomeError');

        try {
            $userProfileResource = new WithdrawalResource();
            $userProfileResource->patch([], ['id' => 10], ['type' => 'complete']);

            $this->fail(sprintf('Expected exception "%s" not thrown', ApiException::class));
        } catch (ApiException $ex) {
            $this->assertInstanceOf(ApiException::class, $ex);
            $this->assertSame('SomeError', $ex->getMessage());
        }
    }

    public function testWithdrawCompleteReturnNULL(): void
    {
        $this->userMock->expects($this->any())->method('completeDebet')->willReturn('1,1');

        $userProfileResource = new WithdrawalResource();
        $this->assertNull($userProfileResource->patch([], ['id' => 10], ['type' => 'complete']));
    }

    public function testWithdrawCompleteReturnArray(): void
    {
        $data = [
            'redirect',
            'https://somehost.com',
        ];

        $this->userMock->expects($this->any())->method('completeDebet')->willReturn('1,' . json_encode($data));

        $userProfileResource = new WithdrawalResource();
        $result = $userProfileResource->patch([], ['id' => 10], ['type' => 'complete']);

        $this->assertSame($data[0], $result[0] ?? null);
        $this->assertSame($data[1], $result[1] ?? null);
    }
}
